process server{
int MAX = 100
int serving = 0, last = 0;
int nrClients = 0
process clients[0,MAX-1];
port signal takeNumber, nextClient;
port Order makeOrder;
port Bread serveBread;
boolean servingClient = false,orderingClient = false;
signal s;
Order order;
Bread bread;
process client, baker;

do
	(nrClients != MAX); client= receive (s) form takeNumber; ->
	{
		nrCLients ++;
		last = (last + 1) % MAX;
		clients[last]=client;
		send (last) to client.number;
		
	}

	(last != serving) -> baker = receive (s) from nextClient; ->
	{
		serving = (serving + 1) % MAX; 
		send (s) to clients[serving].called;
		orderingClient = true;
		
	}

	(orderingClient == true) client = receive (order) from makeOrder; ->
	{
		send (order) to baker.takeOrder;
		orderingClient = false;
		servingClient = true;
	}
	
	(servingClient == true) baker =  receive (bread) from serveBread; ->
	{
		send (bread) to client.receiveBread;
		servingClient = false;
		nrClients --;
	} 	
	
od
}

process baker{
signal s;
process p;
port signal nextClient;
port Order takeOrder;
Bread bread;
Order order;

}

process client{
signal s;
process p;
int myNum; #probabilmente non serve
Order order;
Bread bread;
port int number;
port signal called;
port Bread receiveBread;

send (s) to server.takeNumber;
p=receive (myNum) from number;

p=receive (s) from called;
order = <effettua ordine>
send (order) to server.makeOrder;
p=receive (bread) from receiveBread;
<esci dal negozio>
}
